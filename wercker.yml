# Example: https://github.com/wercker/wercker/blob/master/wercker.yml

build:
   box: razzlegames/godot-ci:docker0
   steps:
        - script:
                name: Do nothing build...
                code: echo "Build... nothing to do"


export:
    box: razzlegames/godot-ci:docker0
    steps:
        - script:
            name: export resource file for stand alone Godot Server
            code: cd Godot && godot -v --export "Linux/X11" ./resources.pck && find .
                       
        - script:
            name: Copy resource file to Werker paths
            code: cp -v Godot/resources.pck "$WERCKER_OUTPUT_DIR" && cp -vR Docker/MultiplayerServer/Dockerfile "$WERCKER_OUTPUT_DIR"

        - script:
            name: List what's in Wercker output
            code: find "$WERCKER_OUTPUT_DIR" 

        - script:
            name: Test resources exist
            code: test -f "$WERCKER_OUTPUT_DIR/resources.pck" 

godot-docker:
    box: razzlegames/godot-ci:docker0
    steps:
        - script:
            name: Create base godot server docker image
            code: find ./

        - internal/docker-build:
            dockerfile: Docker/UbuntuGodotDocker/Dockerfile
            image-name: godot-server

        - internal/docker-push:
            username: $DOCKERHUB_USERNAME
            password: $DOCKERHUB_PASSWORD
            image-name: godot-server
            repository: $DOCKERHUB_USERNAME/godot-server


server-docker:
    box: razzlegames/godot-ci:docker0
    steps:
        - script:
            name: Print all local files to check for resources
            code: find ./

        - internal/docker-build:
            dockerfile: Dockerfile
            image-name: razzlegba-chat-server

        - internal/docker-push:
            username: $DOCKERHUB_USERNAME
            password: $DOCKERHUB_PASSWORD
            image-name: razzlegba-chat-server
            repository: $DOCKERHUB_USERNAME/razzlegba-chat-server
            tag: ubuntu-first

deploy:
    box: razzlegames/godot-ci:docker0
    steps:
        - script:
            name: Run SSH agent
            code:  eval $(ssh-agent -s)
        - script:
            name: Login to Oracle host 1 $ORACLE_HOST_1
            code:  echo "$ORACLE_SSH_KEY_PRIVATE" | tr -d '\r' | ssh-add - && ssh ubuntu@$ORACLE_HOST_1 && whoami && ifconfig

