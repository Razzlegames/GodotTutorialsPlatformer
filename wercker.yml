# Example: https://github.com/wercker/wercker/blob/master/wercker.yml

box: razzlegames/godot-ci:docker0
no-response-timeout: 10
build:
   steps:
        - add-ssh-key:
            keyname: ORACLE_SSH_KEY
export:
    steps:
        - script:
            name: export resource file for stand alone Godot Server
            code: cd Godot && godot -v --export "Linux/X11" ./resources.pck && find .
                       
        - script:
            name: Copy resource file to Werker paths
            code: cp -v Godot/resources.pck "$WERCKER_OUTPUT_DIR" && cp -vR Docker/MultiplayerServer/Dockerfile "$WERCKER_OUTPUT_DIR"

        - script:
            name: List what's in Wercker output
            code: find "$WERCKER_OUTPUT_DIR" 

        - script:
            name: Test resources exist
            code: test -f "$WERCKER_OUTPUT_DIR/resources.pck" 

create-the-building-container:
    steps:
        - internal/docker-build:
            dockerfile: Docker/UbuntuBuildImage/Dockerfile
            image-name: godot-ci

        - internal/docker-push:
            username: $DOCKERHUB_USERNAME
            password: $DOCKERHUB_PASSWORD
            image-name: godot-ci
            repository: $DOCKERHUB_USERNAME/godot-ci
            tag: $WERCKER_GIT_COMMIT

godot-docker:
    steps:
        - script:
            name: Create base godot server docker image
            code: find ./

        - internal/docker-build:
            dockerfile: Docker/UbuntuGodotDocker/Dockerfile
            image-name: godot-server

        - internal/docker-push:
            username: $DOCKERHUB_USERNAME
            password: $DOCKERHUB_PASSWORD
            image-name: godot-server
            repository: $DOCKERHUB_USERNAME/godot-server
            tag: ubuntu-first-$WERCKER_GIT_COMMIT

server-docker:
    steps:
        - script:
            name: Print all local files to check for resources
            code: find ./

        - internal/docker-build:
            dockerfile: Dockerfile
            image-name: razzlegba-chat-server

        - internal/docker-push:
            username: $DOCKERHUB_USERNAME
            password: $DOCKERHUB_PASSWORD
            image-name: razzlegba-chat-server
            repository: $DOCKERHUB_USERNAME/razzlegba-chat-server

create-deploy-scripts:
    steps:
        - script:
            name: Print out all files in step
            code: find ./ 

        - script:
            name: Print docker command about to use
            code: echo "docker pull $MULTIPLAYER_SERVER_DOCKER_PATH" && echo "docker run -v -d -p $MULTIPLAYER_HOST_PORT:$MULTIPLAYER_CONTAINER_PORT/$MULTIPLAYER_PROTOCOL $MULTIPLAYER_SERVER_DOCKER_PATH" 

        - script:
            name: Create Pull Script
            code: echo "docker pull $MULTIPLAYER_SERVER_DOCKER_PATH" >> pullScript.sh
            
        - script:
            name: Create Run script
            code: echo "docker run --name $MULTIPLAYER_DOCKER_NAME -d -p $MULTIPLAYER_HOST_PORT:$MULTIPLAYER_CONTAINER_PORT/$MULTIPLAYER_PROTOCOL $MULTIPLAYER_SERVER_DOCKER_PATH && exit 0" >> runScript.sh

        - script:
            name: Create Stop script
            code: echo "docker stop $MULTIPLAYER_DOCKER_NAME && docker rm $MULTIPLAYER_DOCKER_NAME" >> stopScript.sh

        - script:
            name: Copy deploy scripts
            code: cp -v runScript.sh stopScript.sh pullScript.sh "$WERCKER_OUTPUT_DIR" 

deploy1:
    steps:

        - add-ssh-key:
            keyname: ORACLE_SSH_KEY
        - add-to-known_hosts:
            hostname: $ORACLE_HOST_1
            fingerprint: SHA256:bOkfSrb1/O/QKTzyhAf8ruxm988h9XHk2/GQ/7YF7Tc.

        - script:
            name: Print out all files in step
            code: find ./ 

        - script:
            name: Login to Oracle host 1 $ORACLE_HOST_1 and pull latest docker image
            code: ssh -o "StrictHostKeyChecking=no" ubuntu@$ORACLE_HOST_1 "bash -s" < ./pullScript.sh

        - script:
            name: Login to Oracle host 1 "$ORACLE_HOST_1" and stop latest docker image
            code: ssh -o "StrictHostKeyChecking=no" ubuntu@$ORACLE_HOST_1 "bash -s" < ./stopScript.sh || true

        - script:
            name: Login to Oracle host 1 "$ORACLE_HOST_1" and run latest docker image
            code: ssh -o "StrictHostKeyChecking=no" ubuntu@$ORACLE_HOST_1 "bash -s" < ./runScript.sh

deploy2:
    steps:

        - add-ssh-key:
            keyname: ORACLE_SSH_KEY

        - add-to-known_hosts:
            hostname: $ORACLE_HOST_2
            fingerprint: SHA256:uS1W2mXh4huXlcFS/nFWSz5sUV+DO08D+VkVR1Rwjvs

        - script:
            name: Login to Oracle host 2 $ORACLE_HOST_2 and pull latest docker image
            code: ssh -o "StrictHostKeyChecking=no" ubuntu@$ORACLE_HOST_2 "bash -s" < ./pullScript.sh

        - script:
            name: Login to Oracle host 2 "$ORACLE_HOST_2" and stop latest docker image
            code: ssh -o "StrictHostKeyChecking=no" ubuntu@$ORACLE_HOST_2 "bash -s" < ./stopScript.sh || true

        - script:
            name: Login to Oracle host 2 "$ORACLE_HOST_2" and run latest docker image
            code: ssh -o "StrictHostKeyChecking=no" ubuntu@$ORACLE_HOST_2 "bash -s" < ./runScript.sh
